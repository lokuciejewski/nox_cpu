// Calculate Fibonacci sequence and write values to dummy output buffer (address 0xe000)
// 8 bit version

> 0x1000
start:
    PUSH 0x1 A 
    PUSH 0x1 B
    CALL print_number_A
    CALL print_number_A
    ZERO LI
fibo_loop:
    CMP 0x1 LI
    JZE fibo_loop_b
    ADD B A
    JOF end
    CALL print_number_A
    INC LI
    JMP fibo_loop
fibo_loop_b:
    ADD A B
    JOF end
    POP A S 0x1
    PUSH B A
    CALL print_number_A
    POP S A 0x1
    DEC LI
    jmp fibo_loop
end: 
    HALT


// Prints number from `A` into `output`
print_number_A:
    PUSH A S 0x1
    ZERO LI
hundreds:
    SUB 0x64 A
    JOF hundreds_done
    INC LI
    JMP hundreds
hundreds_done:
    POP A // discard last subtraction
    PUSH LI A
    ADD ascii_modifier A
    POP A S 0x01 // push hundreds to stack
    POP A // discard LI value from A

    ZERO LI
tenths:
    SUB 0xa A
    JOF tenths_done
    INC LI
    JMP tenths
tenths_done:
    POP A // discard last subtraction
    PUSH LI A
    ADD ascii_modifier A
    POP A S 0x01 // pop tenths to stack
    POP A 

    ADD ascii_modifier A
    POP S A 0x02
    
    POP A output
    POP A output
    POP A output

    PUSH ' ' A
    POP A output

    POP S A 0x1
    RET OK

// how much to add to a digit to achieve ascii code
ascii_modifier:
$ 0x30 

> 0xe000
output:
$ 0x0000

// IRQ
> 0xfff8 
$ 0xff00

// stack address
> 0xfffa 
$ 0xf000

// stack size
> 0xfffc 
$ 0x0100

// reset 
> 0xfffe
$ 0x1000